import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  CheckCircle2, 
  Circle, 
  Flame, 
  TrendingUp, 
  Calendar,
  Plus,
  Minus,
  MoreHorizontal
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface HabitCardProps {
  id: string;
  name: string;
  icon: React.ReactNode;
  streak: number;
  completedToday: boolean;
  target: number;
  current: number;
  color: "wellness" | "energy" | "calm";
  unit?: string;
  onToggle?: (id: string) => void;
  onIncrement?: (id: string) => void;
  onDecrement?: (id: string) => void;
  onEdit?: (id: string) => void;
  onDelete?: (id: string) => void;
}

export default function HabitCard({
  id,
  name,
  icon,
  streak,
  completedToday,
  target,
  current,
  color,
  unit = "",
  onToggle,
  onIncrement,
  onDecrement,
  onEdit,
  onDelete
}: HabitCardProps) {
  const [isAnimating, setIsAnimating] = useState(false);

  const progress = (current / target) * 100;
  const isCompleted = current >= target;

  const getColorClasses = (color: string) => {
    const colors = {
      wellness: {
        bg: "bg-wellness-50",
        border: "border-wellness-200",
        button: "bg-wellness-600 hover:bg-wellness-700",
        buttonOutline: "border-wellness-300 hover:bg-wellness-50 text-wellness-700",
        text: "text-wellness-700",
        badge: "bg-wellness-100 text-wellness-800"
      },
      energy: {
        bg: "bg-energy-50",
        border: "border-energy-200",
        button: "bg-energy-600 hover:bg-energy-700",
        buttonOutline: "border-energy-300 hover:bg-energy-50 text-energy-700",
        text: "text-energy-700",
        badge: "bg-energy-100 text-energy-800"
      },
      calm: {
        bg: "bg-calm-50",
        border: "border-calm-200",
        button: "bg-calm-600 hover:bg-calm-700",
        buttonOutline: "border-calm-300 hover:bg-calm-50 text-calm-700",
        text: "text-calm-700",
        badge: "bg-calm-100 text-calm-800"
      }
    };
    return colors[color as keyof typeof colors];
  };

  const colorClasses = getColorClasses(color);

  const getStreakColor = (streak: number) => {
    if (streak >= 21) return "text-energy-600";
    if (streak >= 14) return "text-wellness-600";
    if (streak >= 7) return "text-calm-600";
    return "text-muted-foreground";
  };

  const handleToggle = () => {
    if (onToggle) {
      setIsAnimating(true);
      onToggle(id);
      setTimeout(() => setIsAnimating(false), 300);
    }
  };

  const handleIncrement = () => {
    if (onIncrement && current < target) {
      onIncrement(id);
    }
  };

  const handleDecrement = () => {
    if (onDecrement && current > 0) {
      onDecrement(id);
    }
  };

  return (
    <Card className={`transition-all duration-300 hover:shadow-md ${
      isCompleted ? colorClasses.bg : ""
    } ${colorClasses.border}`}>
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-3">
            <Button
              variant={isCompleted ? "default" : "outline"}
              size="sm"
              className={`w-10 h-10 rounded-full p-0 transition-all duration-300 ${
                isCompleted 
                  ? colorClasses.button
                  : colorClasses.buttonOutline
              } ${isAnimating ? "scale-110" : ""}`}
              onClick={handleToggle}
            >
              {isCompleted ? (
                <CheckCircle2 className="w-5 h-5 text-white" />
              ) : (
                icon
              )}
            </Button>
            <div>
              <h4 className="font-medium text-foreground">{name}</h4>
              <div className="flex items-center space-x-2 text-sm">
                <Flame className={`w-4 h-4 ${getStreakColor(streak)}`} />
                <span className={getStreakColor(streak)}>
                  {streak} day streak
                </span>
                {streak >= 7 && (
                  <Badge variant="secondary" className={colorClasses.badge}>
                    <TrendingUp className="w-3 h-3 mr-1" />
                    Hot
                  </Badge>
                )}
              </div>
            </div>
          </div>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="w-8 h-8 p-0">
                <MoreHorizontal className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onEdit?.(id)}>
                Edit Habit
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onDelete?.(id)}>
                Delete Habit
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        {/* Progress Section */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Progress</span>
            <span className="text-sm text-muted-foreground">
              {current}/{target} {unit}
            </span>
          </div>
          
          <Progress 
            value={progress} 
            className="h-2"
          />

          {/* Counter Controls */}
          {target > 1 && (
            <div className="flex items-center justify-center space-x-4 pt-2">
              <Button
                variant="outline"
                size="sm"
                className="w-8 h-8 p-0"
                onClick={handleDecrement}
                disabled={current <= 0}
              >
                <Minus className="w-3 h-3" />
              </Button>
              
              <div className="flex items-center space-x-2 min-w-[80px] justify-center">
                <span className="text-lg font-semibold">{current}</span>
                <span className="text-sm text-muted-foreground">/ {target}</span>
              </div>
              
              <Button
                variant="outline"
                size="sm"
                className="w-8 h-8 p-0"
                onClick={handleIncrement}
                disabled={current >= target}
              >
                <Plus className="w-3 h-3" />
              </Button>
            </div>
          )}

          {/* Completion Badge */}
          {isCompleted && (
            <div className="flex justify-center pt-2">
              <Badge className={`${colorClasses.button} text-white`}>
                <CheckCircle2 className="w-3 h-3 mr-1" />
                Completed Today!
              </Badge>
            </div>
          )}
        </div>

        {/* Weekly Progress Indicator */}
        <div className="mt-4 pt-3 border-t">
          <div className="flex items-center justify-between text-xs text-muted-foreground">
            <span>This Week</span>
            <Calendar className="w-3 h-3" />
          </div>
          <div className="flex items-center space-x-1 mt-2">
            {['M', 'T', 'W', 'T', 'F', 'S', 'S'].map((day, index) => {
              const completed = index < 5; // Mock data
              return (
                <div
                  key={day}
                  className={`w-6 h-6 rounded-full text-xs flex items-center justify-center ${
                    completed 
                      ? colorClasses.button + " text-white" 
                      : "bg-muted text-muted-foreground"
                  }`}
                >
                  {day}
                </div>
              );
            })}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
